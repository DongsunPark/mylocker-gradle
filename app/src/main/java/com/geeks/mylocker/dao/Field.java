package com.geeks.mylocker.dao;

import com.geeks.mylocker.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table FIELD.
 */
public class Field implements Entity {

    private Long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String value;
    private int position;
    private long recordId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FieldDao myDao;

    private Record record;
    private Long record__resolvedKey;


    public Field() {
    }

    public Field(Long id) {
        this.id = id;
    }

    public Field(Long id, String name, String value, int position, long recordId) {
        this.id = id;
        this.name = name;
        this.value = value;
        this.position = position;
        this.recordId = recordId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFieldDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getValue() {
        return value;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setValue(String value) {
        this.value = value;
    }

    public int getPosition() {
        return position;
    }

    public void setPosition(int position) {
        this.position = position;
    }

    public long getRecordId() {
        return recordId;
    }

    public void setRecordId(long recordId) {
        this.recordId = recordId;
    }

    /** To-one relationship, resolved on first access. */
    public Record getRecord() {
        long __key = this.recordId;
        if (record__resolvedKey == null || !record__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RecordDao targetDao = daoSession.getRecordDao();
            Record recordNew = targetDao.load(__key);
            synchronized (this) {
                record = recordNew;
            	record__resolvedKey = __key;
            }
        }
        return record;
    }

    public void setRecord(Record record) {
        if (record == null) {
            throw new DaoException("To-one property 'recordId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.record = record;
            recordId = record.getId();
            record__resolvedKey = recordId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
